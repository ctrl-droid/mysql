## JavaScript

-- html: 화면 구조(배치) 담당
-- css: 화면 표현 담당
-- javascript
	>> 기능(operation)
	>> 이벤트처리: 
		=> 이벤트소스(버튼, 이미지, 입력양식, 윈도우, 문서), 
		=> 이벤트 : 클릭, 더블클릭, 포커스받았을때, 포커스잃었을때, 로드, 마우스왔을때 ...
		=> 처리로직: function(){.....} => 함수명() 
	>> 입력 데이터 검증	
	>> 동적 컨텐츠(동적 화면처리)
	
	>> 브라우저 내장, 브라우저 종속적
	

## 변수
-- 지역변수
	>> funtion 내부에 선언 : var 지역변수명 = 값;
	
-- 전역변수
	>> function 외부에 선언한 모든 변수:
		var 전역변수명 = 값;
		전역변수명 = 값;
	>> function 내부에 선언 : 전역변수명 = 값;	


## 데이터타입
-- 값에 의해서 자동으로 타입이 결정

## 주의사항
-- 명령문의 끝은 ;(세미콜론) 생략가능
	>> 권장하지 않음
	>> js 라이브러리로 제공되는 경우에 압축 사용시 문제발생
	>> 예시
	var no=1;
	var no=2;
	
	var no=1;var no=2;
	
## DOM
-- 트리구조
-- element(tag), attribute(속성), text	
-- Window
	>> Document
		>> Form
			>> Text
			>> Password
			>> Checkbox
			>> Radio
			>> Submit
			>> Reset
			>> Select
			>> Button 
		>> Location
		>> Image
		>> ...
		
-- DOM 사용위한 부가적인 속성
	>> name : javascript 사용위한 속성
		=> <form name="폼이름" action="" method="">
		=> <input type="text" name="memberId">
		
	>> id : css, javascript 사용위한 속성 
		=> <form name="폼이름" id="폼아이디" ...>
		=> <input type="text" name="memberId" id="memberId">
		=> <div id="">...</div>
		=> <span id="">...</span>
		
		
## 내장객체
-- 기본으로 제공해주는 객체, 즉, 객체 생성하지 않고 사용가능
-- Window => window => 최상위 객체 window는 생략 가능
-- Document => document		
-- Location => location

-- 예시) 문서에 출력 
	window.document.write("html 코드");
	document.write("html 코드");


## 자바스크립트 선언위치 및 선언 형식:
-- <head>...</head>
-- <body>...</body>
-- 다중파일 사용시에 우선순위를 고려해서 선언해야함

-- 내부파일 : 
	<script type="text/javascript">
	....
	</script>
	
-- 외부파일
	<script type="text/javascript" src="외부파일경로url"></script>
	
## 함수의 종류	
-- 내장함수: Window 객체 
-- 내장객체
-- 사용자 정의 함수
-- 사용자 정의 클래스함수

	
## 내장함수	 : Window 객체
-- alert("메세지")
	=> 확인
-- var 변수명 = confirm("확인메세지"); 
	=> 확인/취소
-- var 변수명 = isNaN("데이터")
	=> 숫자여부 체킹
	=> 데이터 문자이면 : true
	=> 데이터 숫자이면 : false
-- var 변수명 = prompt("메세지" [, "초기값"])	
-- parseInt("숫자데이터") : 정수형 변환
-- parseFloat("숫자데이터") : 실수형 변환
-- eval("수식문자열") : 수식변환, ajax => json형식문자열을 json객체 변환

## javascript 디버그
-- 개발자모드 : F12
-- console.log("디버그 메세지")

## null

## undefined
-- 정의되어 있지 않음
-- var 변수명;

## 타입 체킹
-- typeof(데이터)
-- typeof 데이터

## 함수선언
-- 이름 지정 함수 : 필요시 함수 호출 => 함수명(데이터1,데이터x)
function 함수명(매개변수명1, 매개변수명x) {
	// 수행문
	[return;]
	[return 데이터;]
}

-- 이름이 없는 함수(익명함수) : 
window.onload = function() {
	// 수행문
}

## dom 사용하기
-- document.폼이름.입력항목이름 
-- document.getElementById("id지정")


## 이벤트처리: 윈도우가 로드될때 로그인양식의 아이디입력항목에 포커스위치시킴
1. 이벤트소스: window
2. 이벤트 : load
3. 이벤트핸들러 : 
	>> OnLoad
	>> 함수선언 연결
	
	
## 이벤트처리: 실습 
-- 체크박스 비밀번호 보이기가 체크(click)하면 
-- 비밀번호, 비밀번호확인의 type="text" 변경하면 비밀번호보이기 가능
-- 비밀번호 보이기가 체크(click)를 해제하면 
-- 비밀번호, 비밀번호확인의 type="password" 변경하면 비밀번호 보이지않음

1. 이벤트소스: 체크박스 비밀번호 보이기 
	=> id="" name=""
	=> 
	<input type="checkbox" id="pwVisible" name="pwVisible"
		onclick="이벤트처리함수명()" >

2. 이벤트 : 
	=> 체크(click)하면 / 체크(click)를 해제
	=> checked	Sets or returns the checked state of a checkbox
	=> checked = true / false
	
3. 이벤트핸들러 : 
	>> 함수선언 : function pwVisibleChecked(){}

	>> 이벤트처리로직 : 
		=> checked = true: 비밀번호, 비밀번호확인의 type="text" 변경 (비밀번호 보이기)
		=> checked = false: 비밀번호, 비밀번호확인의 type="password" 변경(비밀번호 감추기)


## 이벤트처리: 비밀번호/비밀번호확인 데이터 동일여부 체크
1. 이벤트소스: 이름 입력항목

2. 이벤트 : 포커스가 왔을때

3. 이벤트핸들러 : 
	>> 함수선언 : memberPwConfirmChecked()
	
	>> 처리로직 : 
		-- 비밀번호,비밀번호확인 입력데이터가 동일여부 비교해서
		-- 다른경우 : 오류처리(경고창)
		-- 미입력한경우 : 오류처리(경고창 => 해당미입력항목커서이동)
	
	
## 입력항목의 입력데이터 가져오기	
-- var takeElement = document.getElementById("아이디");
   var takeData = takeElement.value; // String

-- var takeData = document.getElementById("아이디").value;

	
## 내장객체
-- String
	>> 길이: length 변수
	
	
## 이벤트처리: 
-- 이메일도메인 select 변경될때마다 도메인주소로 자동 설정
-- 직접입력 : 이메일도메인을 직접입력
-- 읽기전용 속성: readOnly=""
	>> 읽기전용 설정: 
		=> 엘리먼트객체명.readOnly = "readOnly"
		=> 엘리먼트객체명.readOnly = true
		=> 엘리먼트객체명.setAttribute("readOnly", true);
		
	>> 읽기전용 해제: 
		=> 엘리먼트객체명.readOnly=""
		=> 엘리먼트객체명.readOnly = false
		=> 엘리먼트객체명.setAttribute("readOnly", false);
		=> 엘리먼트객체명.removeAttribute("readOnly");
		
1. 이벤트소스: <select onchange="이벤트처리함수명(this.value)">

2. 이벤트 : onChange() , this.value

3. 이벤트핸들러 : 
	>> 함수선언 : function emailDomainChange(takeData){}
	>> 처리로직
		=> 선택인경우 : none
		=> 직접입력경우 : emailInput
		=> 이메일도메인선택경우 : @naver.com
	
	
## Element 주요 속성
-- innerHTML
	>> set 변경 : html 태그 변경
	>> get 조회 : html 태그 조회
	
-- innerText
	>> set 변경 : 태그 텍스트(plain-text) 변경
	>> get 조회 : 태그 텍스트(plain-text) 조회


## 스타일 적용하기
-- <tag style="속성명:속성값;속성명:속성값;">
-- <tag class="클래스명1 클래스명x"> => css 해당 클래스에 대한 스타일 선언

-- 예시:
	<tag style="font-size:11px;background-color:red;">


## javascript 스타일 적용하기
1. style 속성 사용방법
-- 엘리먼트객체명.style.속성명 = 속성값;
-- 속성명 지정규칙:
	>> font-size : fontSize
	>> background-color: backgroundColor
	>> color : color
	>> width : width
	
2. css에 선언해놓은 class 사용방법
-- 엘리먼트객체명.className = "클래스명1 클래스명x";

3. style, class 
-- 엘리먼트객체명.setAttribute("style", "속성명:속성값;속성명:속성값;"); 	
-- 엘리먼트객체명.setAttribute("class", "클래스명1 클래스명x"); 	