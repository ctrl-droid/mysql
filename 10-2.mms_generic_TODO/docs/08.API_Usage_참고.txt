## 주요 API ##

## java.lang.Object
- 모든 클래스의 최상위 클래스 (Root Class)
- 명시적으로 상속하지 않아도 자동으로 상속됨
- 모든 객체가 갖어야할 공통 기능으로 모델링
-- 자주 재정의하여 사용하는 메서드
	==> public String toString(){} : 주요 데이터 문자열 반환 
	==> public boolean equals(Object obj){} : 같은 객체인지 비교
	==> public int hashCode(){} : 생성한 객체의 참조값 반환

1) + toString() : String   (UML 표기방법: modifier 메서드이름(매개변수명:타입,매개변수명:타입): 반환타입)
	- 해당 객체의 주요데이터를 String 타입으로 반환하는 메서드 
	- Object : "클래스이름@참조값" 문자열 반환

2) + equals(Object) : boolean
	- 객체가 같은지 비교해서 boolean 타입 반환
	- Object : 같은 객체이면 true  : 즉, 참조값이 같으면 같은 객체 : 참조값1 == 참조값2 
	- Object : 다른 객체이면 false : 즉, 참조값이 다르면 다른 객체 : 참조값1 != 참조값2 
	- 예: Customer 클래스의 인스턴스이면서 아이디 [ 또는 암호, 이름] 정보가 같으면
		같은 객체로 처리하도록 재정의(변경) 사용
	- String의 경우에는 같은 문자열(대소문자 구분)이면 같은 객체 true 반환 재정의	

3) + hashCode() : int
	- 해당객체의 참조값을 16진수 형식의 int 타입으로 변환하여 반환하는 메서드
	- 사용자가 변경할 수 없는 값 (조회 전용)
	- 즉, hashCode가 같으면 같은 참조값을 의미
	- equals() 메서드를 재정의하게되면 hashCode() 메서드 재정의할것을 권장
	- equals() 메서드에서 재정의시에 사용한 필드의 hashCode() 값에 대해서 xor(^) 값을 리턴 재정의

## 값을 비교 : 연산자 사용
-- 값1 == 값2
-- 값1 != 값2

## 객체를 비교 : equals() 메서드 사용
-- 객체1.equals(객체2)
-- 많은 클래스에서 특정한 속성이 같으면 같은객체로 처리 변경(재정의) 사용
-- String : 같은 문자열이면 같은 객체로 처리 변경


## Wrapper Class ##

-- 기본형  <--> 객체형 변환 클래스

-- byte -> Byte
-- short -> Short
-- int -> Integer
-- long -> Long
-- float -> Float
-- double -> Double
-- char -> Character
-- boolean -> Boolean

-- 주로 사용 : 문자열형식숫자를 => 숫자


## 자바 문자열 관련 클래스 ##
1. java.lang.String : 
-- 기본형처럼 사용가능하지만 객체타입, 즉, new 없이 사용가능
-- 불변의 문자열(immutable string)
-- 기본형처럼 사용하는 경우에는 heap내부의 literal pool에 생성됨
-- 같은 문자열인 경우에는 pool에 같은 문자열참조
-- JDK1.0

2. java.lang.StringBuffer : new 객체 생성 사용
-- 가변의 문자열(mutable string)
-- 생성때마다 heap area 생성
-- JDK1.0

3. java.lang.StringBuilder 
-- JDK1.5

## 문자열 토큰링
-- java.util.StringTokenizer
-- java.lang.String#split()



## 날짜 , 형식 관련 클래스 ##
1. java.util.Date, java.util.Calendar,  java.util.GregorianCalendar
2. java.text.SimpleDateFormat
3. java.text.NumberFormat
4. java.text.DecimalFormat


## 형식(format) API
-- java.text.SimpleDateFormat
-- java.text.NumberFormat
-- java.text.Decimalformat
-- java.util.Locale


## java.lang.Math , java.util.Random
-- 임의의 숫자 발생 처리: 난수
-- 보안문자: 숫자랜덤제공, 숫자영문자랜덤제공, 영문자제공
-- 비밀번호찾기: 임시비밀번호, 인증번호
-- 인터넷뱅킹 : 휴대폰문자로 숫자4자리 또는 6자리 인증문자
-- 로또번호 추출

-- java.lang.Math.random():double 
	=> 0.0 ~ 1.0 미만의 임의의 숫자
	
-- java.util.Random
	>> 생성자: Random(), Random(long seed)
	>> 메서드: 
		=> nextInt():int, nextInt(int):int
		=> nextDouble():double
		=> nextBoolean()

## java.lang.System
-- System.exit(int)
-- 현재시간반환 메서드: currentTimeMillis(), nanoTime()



## java.lang.Properties

## java.util.Enumeration

## 기존 배열
-- 기본형, 객체형 그룹으로 자료 관리하기 위한 자료 저장구조
-- 크기 고정
-- 자료저장구조:  CRUD 기능을 별도로 제공하지 않음
-- 배열명.length : 배열크기만을 저장

## Collection API (FrameWork) ##

-- 객체들을 저장관리하기 위한 자료 저장구조
-- java.util.*
-- 크기가 자동으로 추가 증설
-- CRUD(등록, 조회, 변경, 삭제 등) 를 위한 다양한 메서드 제공

-- 종류 :
1. List 계열 : 순서 있음, 중복 가능 
2. Set 계열  : 순서 없음, 중복 불가 
3. Map 계열  : key=value, key 이름은 unique 해야함
4. Queue (JDK1.5)
		
## List 계열 CRUD 메서드 => ArrayList
 1) 등록 => add(Object obj) : boolean
 2) 조회 => get(int index) : Object
 3) 변경 => set(int index, Object obj) : Object
 4) 삭제 => remove(int index) : Object , remove(Object) : boolean
 5) 크기 => size() : int
 
 6) 기타 메서드	:	
	전체 저장객체 삭제 => clear() : void
	저장객체 단방향 검색 => iterator() : Iterator
	저장객체 양방향 검색 => listIterator() : ListIterator

			
## Set 계열 CRUD 메서드 => HashSet
	 1) 등록 => add(Object obj) : boolean
	 4) 삭제 => remove(Object) : boolean
	 5) 크기 => size() : int

	 2) 조회 => ?
	 3) 변경 => ?
			 
	 6) 기타 메서드	:
		전체 저장객체 삭제 => clear() : void
		저장객체 단방향 검색 => iterator() : Iterator
			

## Map 계열 CRUD 메서드 => HashMap

1) 등록 또는 변경  
	=> put(String key, Object value) : Object
	=> 동일한 키가 존재하지 않으면 등록
	=> 동일한 키가 존재하면 변경
		
2) 조회
	=> get(Object key) : Object  
		
3) 삭제 
	=> remove(Object key): Object
		
4) key 목록만 조회
	=> keySet() : Set					
			

## Collection 객체들을 검색하기 위한 API

-- java.util.Iterator (interface): 단방향 검색 => Set, List
	1) 다음존재유무 : hasNext() : boolean
	2) 다음객체 조회 : next() : Object
	3) 객체삭제 : remove(): void
			 
-- java.util.ListIterator : 양방향 검색 => List
	1) 다음존재유무 : hasNext() : boolean
	2) 다음객체 조회 : next() : Object
	3) 객체삭제 : remove(): void
	
	4) 앞에존재유무 : hasPrevious() : boolean
	5) 앞에객체 조회 : previous() : Object
	6) 객체추가 : add(Object obj) : void
	7) 객체변경	: set(Object obj) : void
	

## Generic
-- jdk1.5 추가
-- 지정한 객체타입의 전용 Collection

-- 사용방법:
	// jdk1.4 : 모든 객체를 저장관리하기 위한자료 저장구조 => 조회시에 instanceof 타입체킹하고, 형변환해야하는 불편 
	Collection타입 참조변수명 = new Collection타입클래스명();
	ArrayList list = new ArrayList();
	
	// jdk1.5 Generic : 지정한 객체만을 저장관리하기 위한 전용 저장구조 => 조회시에 지정한 객체를 반환 => 바로 사용 가능
	Collection타입<특정클래스명지정> 참조변수명 = new Collection타입클래스명<특정클래스명지정>();
	ArrayList<Member> list = new ArrayList<Member>();
	
-- API
	<E> : Element(특정 지정한 Object)
	<K> : Key 해당하는 Element
	<V> : Value 해당하는 Element
	<T> : Type 해당하는 Element	
	
	
## 수업코드 비교	
## ArrayList : exist(Strin):int	
## 1
public int exist(String memberId) {
	if (memberId == null) {
		return -1;
	}
	
	for (int index = 0; index < list.size(); index++) {
		if(list.get(index) instanceof Member) { 
			Member dto = (Member)list.get(index);
			if (dto.getMemberId() == memberId) { // ??? 같은객체비교시에는 equals(), String 문자열비교시에 반드시 equals()
				return index;
			}
		}
	}
	return -1;
}

## 2
public int exist(String memberId) {
	for (int index = 0; index < list.size(); index++) {
		if (list.get(index) instanceof Member) {
			Member dto = (Member) list.get(index);
			if (dto.getMemberId() == memberId) { // ??? 같은객체비교시에는 equals(), String 문자열비교시에 반드시 equals()
				return index;
			}
		}
	}
	return -1;
}

## 3
public int exist(String memberId) {
	for(int index = 0; index < list.size(); index++) {
		if (list.get(index) instanceof Member) {
			Member dto = (Member)list.get(index);
			if(dto.getMemberId().equals(memberId)) {
				return index;
			}
		}
	}
	return -1;
}

## 4
public int exist(String memberId) {
	if (memberId == null) {	
		return -1;
	}
	
	for (int index = 0; index < getCount(); index++) { 
		Member dto = (Member) list.get(index);
		if(memberId.equals(dto.getMemberId())) {
			return index;
		}
	}
	
	return -1;
}

